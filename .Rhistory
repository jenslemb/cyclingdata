rvest::html_elements("li > div")|>
html_text2()
temp_stage <- race_data[1:32]
tage_data <- tibble::tibble(
vars = temp_stage[seq(1,length(temp_stage),2)],
values = temp_stage[seq(0,length(temp_stage),2)]
)
View(tage_data)
View(stage_data)
# get data
race_data <- url_data |>
rvest::read_html() |>
rvest::html_elements("li > div")|>
html_attr()
# get data
race_data <- url_data |>
rvest::read_html() |>
rvest::html_elements("li > div")|>
html_attr()
# get data
race_data <- url_data |>
rvest::read_html() |>
rvest::html_elements("li > div")
View(race_data)
# get data
race_data <- url_data |>
rvest::read_html() |>
rvest::html_element("li > div")
View(race_data)
race_data
# get data
race_data <- url_data |>
rvest::read_html() |>
rvest::html_elements("li > div")
View(race_data)
race_data[[2]]
race_data[[6]]
# get data
race_data <- url_data |>
rvest::read_html() |>
rvest::html_elements("li > div") |>
html_attr()
# get data
race_data <- url_data |>
rvest::read_html() |>
rvest::html_elements("li > div") |>
html_attrs()
View(race_data)
# get data
race_data <- url_data |>
rvest::read_html() |>
rvest::html_elements("li > div") |>
html_attrs("class")
# get data
race_data <- url_data |>
rvest::read_html() |>
rvest::html_elements("li > div") |>
html_attrs("class")
# get data
race_data <- url_data |>
rvest::read_html() |>
rvest::html_elements("li > div > span") |>
html_attrs("class")
# get data
race_data <- url_data |>
rvest::read_html() |>
rvest::html_elements("li > div > span") |>
html_text2()
# get data
race_data <- url_data |>
rvest::read_html() |>
rvest::html_elements("li > div > span") |>
html_attrs("class")
# get data
race_data <- url_data |>
rvest::read_html() |>
rvest::html_elements("li > div > span") |>
html_attr("class")
temp_stage <- url_data |>
rvest::read_html() |>
rvest::html_elements("div")|>
rvest::html_text2()
race_data <- race_data[[1]] |>
html_table() #stage results
temp_stage <- url_data |>
rvest::read_html() |>
rvest::html_elements("li")|>
rvest::html_text2()
race_data <- race_data[[1]] |>
html_table() #stage results
# get data
race_data <- url_data |>
rvest::read_html() |>
rvest::html_elements(css="table.basic")
race_data <- race_data[[1]] |>
html_table() #stage results
devtools::load_all()
cyclingscraper("pologne", 2029)
cyclingscraper("pologne", 1929)
cyclingscraper("pologne", "all")
race_id <- "tour-de-pologne"
year <- 1929
i <- "12"
# url
url_data <- stringr::str_c("https://www.procyclingstats.com/race/",race_id, "/", year, "/stage-", i, sep = "")
# different url if stage is a prologue
if (i == "prologue") {
url_data <- stringr::str_c("https://www.procyclingstats.com/race/",race_id, "/", year, "/", i, sep = "")
}
# get data
temp_stage <- url_data |>
rvest::read_html() |>
rvest::html_elements("li > div")|>
rvest::html_text2()
temp_stage <- temp_stage[1:32]
# Get parcours type
temp_stage[16] <- url_data |>
rvest::read_html() |>
rvest::html_elements("li > div > span") |>
rvest::html_attr("class")
# Create data.frame
stage_data <- t(temp_stage[seq(0,length(temp_stage),2)])
colnames(stage_data) <- temp_stage[seq(1,length(temp_stage),2)]
stage_data <-data.frame(stage_data)
# clean names of variables
stage_data <- janitor::clean_names(stage_data)
# url
url_data <- stringr::str_c("https://www.procyclingstats.com/race/", race_id, "/", year, sep = "")
# get data
race_data <- url_data |>
rvest::read_html() |>
rvest::html_elements(css="table.basic")
# select table to use. completed races have 3 tables where non-completed have 2.
if(length(race_data)==2){
race_data <- race_data[[1]] |>
rvest::html_table()
} else if(length(race_data)==3){
race_data <- race_data[[2]] |>
rvest::html_table()
}
# clean variable names
race_data <- janitor::clean_names(race_data)
View(race_data)
# keep only rows concerning stage info
race_data <- race_data |>
dplyr::mutate(stage = dplyr::na_if(stage, '')) |>
tidyr::drop_na(stage, km) |>
dplyr::select(-c(x, date, day,km))
# Generate stage_id and stage_type variables
race_data <- race_data |>
dplyr::mutate(stage_id =
dplyr::case_when(stringr::str_detect(stage,"Prelude")==TRUE~"prologue", #1988 tdf stage 1
stringr::str_detect(stage,"Prologue")==TRUE~"prologue",
stringr::str_detect(stage, "[:digit:][:digit:][:alpha:]")==TRUE~stringr::str_sub(stage,7,9), # in case of e.g. 21a and 21b
stringr::str_detect(stage, "[:digit:][:alpha:]")==TRUE~stringr::str_sub(stage,7,8), # in case of e.g. 2a and 2b
TRUE~stringr::str_extract(stage,"\\d+")),
stage_type =
dplyr::case_when(stringr::str_detect(stage,"Prologue")==TRUE~"Prologue",
stringr::str_detect(stage,"ITT")==TRUE~"ITT",
stringr::str_detect(stage,"TTT")==TRUE~"TTT",
TRUE~"Road race"))
# Manual correction due to wrong url
if(race_id=="vuelta-a-espana" && year == 2009){
race_data <- race_data |>
dplyr::mutate(stage_id = dplyr::if_else(stage_type=="Prologue", "1", stage_id))
}
if(race_id=="paris-nice" && year == 1952){
race_data$stage_id[3] <- "3a"
race_data$stage_id[4] <- "3b"
}
if(race_id=="paris-nice" && year == 2012){
race_data$stage_id[1] <- "prologue"
}
if(race_id=="tour-de-romandie" && year == 1993){
race_data$stage_id[7] <- "6"
}
if(race_id=="tour-de-romandie" && year == 2023){
race_data$stage_id[1] <- "0"
}
race_data <- race_data[[2]] |>
rvest::html_table()
# url
url_data <- stringr::str_c("https://www.procyclingstats.com/race/", race_id, "/", year, sep = "")
# get data
race_data <- url_data |>
rvest::read_html() |>
rvest::html_elements(css="table.basic")
race_data <- race_data[[2]] |>
rvest::html_table()
View(race_data)
# clean variable names
race_data <- janitor::clean_names(race_data)
# keep only rows concerning stage info
race_data <- race_data |>
dplyr::mutate(stage = dplyr::na_if(stage, '')) |>
tidyr::drop_na(stage, km) |>
dplyr::select(-c(x, date, day,km))
# Generate stage_id and stage_type variables
race_data <- race_data |>
dplyr::mutate(stage_id =
dplyr::case_when(stringr::str_detect(stage,"Prelude")==TRUE~"prologue", #1988 tdf stage 1
stringr::str_detect(stage,"Prologue")==TRUE~"prologue",
stringr::str_detect(stage, "[:digit:][:digit:][:alpha:]")==TRUE~stringr::str_sub(stage,7,9), # in case of e.g. 21a and 21b
stringr::str_detect(stage, "[:digit:][:alpha:]")==TRUE~stringr::str_sub(stage,7,8), # in case of e.g. 2a and 2b
TRUE~stringr::str_extract(stage,"\\d+")),
stage_type =
dplyr::case_when(stringr::str_detect(stage,"Prologue")==TRUE~"Prologue",
stringr::str_detect(stage,"ITT")==TRUE~"ITT",
stringr::str_detect(stage,"TTT")==TRUE~"TTT",
TRUE~"Road race"))
# Manual correction due to wrong url
if(race_id=="vuelta-a-espana" && year == 2009){
race_data <- race_data |>
dplyr::mutate(stage_id = dplyr::if_else(stage_type=="Prologue", "1", stage_id))
}
if(race_id=="paris-nice" && year == 1952){
race_data$stage_id[3] <- "3a"
race_data$stage_id[4] <- "3b"
}
if(race_id=="paris-nice" && year == 2012){
race_data$stage_id[1] <- "prologue"
}
if(race_id=="tour-de-romandie" && year == 1993){
race_data$stage_id[7] <- "6"
}
if(race_id=="tour-de-romandie" && year == 2023){
race_data$stage_id[1] <- "0"
}
View(race_data)
devtools::load_all()
lol <- cyclingscraper("pologne", years = "all")
lol <- cyclingscraper("pologne", years = c(1933,1937,1939))
devtools::load_all()
lol <- cyclingscraper("pologne", years = c(1933,1937,1939))
lol <- cyclingscraper("pologne", years = "all")
lol <- cyclingscraper("suisse", years = "all")
lol <- cyclingscraper("pologne", years = 1952:1962)
lol <- cyclingscraper("pologne", years = 1947:1949)
View(lol)
lol <- cyclingscraper("pologne", years = 1939)
lol <- cyclingscraper("pologne", years = 1937)
lol <- cyclingscraper("pologne", years = 1933)
lol <- cyclingscraper("pologne", years = 1929)
lol <- cyclingscraper("pologne", years = 1928)
devtools::load_all()
lol <- cyclingscraper("pologne", years = "all")
year <- 1900
year <- 1990
r
# url
url_data <- stringr::str_c("https://www.procyclingstats.com/race/", race_id, "/", year, sep = "")
# get data
race_data <- url_data |>
rvest::read_html() |>
rvest::html_elements(css="table.basic")
temp_length <- length(race_data)
# select table to use. completed races have 3 tables where non-completed have 2.
if (temp_length == 3) {
race_data <- race_data[[2]] |>
rvest::html_table()
} else if (temp_length == 2) {
race_data <- race_data[[1]] |>
rvest::html_table()
}
# clean variable names
race_data <- janitor::clean_names(race_data)
# keep only rows concerning stage info
race_data <- race_data |>
dplyr::mutate(stage = dplyr::na_if(stage, '')) |>
tidyr::drop_na(stage, km) |>
dplyr::select(-c(x, date, day,km))
# Generate stage_id and stage_type variables
race_data <- race_data |>
dplyr::mutate(stage_id =
dplyr::case_when(stringr::str_detect(stage,"Prelude")==TRUE~"prologue", #1988 tdf stage 1
stringr::str_detect(stage,"Prologue")==TRUE~"prologue",
stringr::str_detect(stage, "[:digit:][:digit:][:alpha:]")==TRUE~stringr::str_sub(stage,7,9), # in case of e.g. 21a and 21b
stringr::str_detect(stage, "[:digit:][:alpha:]")==TRUE~stringr::str_sub(stage,7,8), # in case of e.g. 2a and 2b
TRUE~stringr::str_extract(stage,"\\d+")),
stage_type =
dplyr::case_when(stringr::str_detect(stage,"Prologue")==TRUE~"Prologue",
stringr::str_detect(stage,"ITT")==TRUE~"ITT",
stringr::str_detect(stage,"TTT")==TRUE~"TTT",
TRUE~"Road race"))
# Manual correction due to wrong url
if(race_id=="vuelta-a-espana" && year == 2009){
race_data <- race_data |>
dplyr::mutate(stage_id = dplyr::if_else(stage_type=="Prologue", "1", stage_id))
}
View(race_data)
race_data <- race_data[,-1:3]
race_data <- race_data[,-c(1:3)]
View(race_data)
# url
url_data <- stringr::str_c("https://www.procyclingstats.com/race/", race_id, "/", year, sep = "")
# get data
race_data <- url_data |>
rvest::read_html() |>
rvest::html_elements(css="table.basic")
temp_length <- length(race_data)
# select table to use. completed races have 3 tables where non-completed have 2.
if (temp_length == 3) {
race_data <- race_data[[2]] |>
rvest::html_table()
} else if (temp_length == 2) {
race_data <- race_data[[1]] |>
rvest::html_table()
}
# clean variable names
race_data <- janitor::clean_names(race_data)
# keep only rows concerning stage info
race_data <- race_data |>
dplyr::mutate(stage = dplyr::na_if(stage, '')) |>
tidyr::drop_na(stage, km) |>
dplyr::select(-c(x, date, day,km))
# Generate stage_id and stage_type variables
race_data <- race_data |>
dplyr::mutate(stage_id =
dplyr::case_when(stringr::str_detect(stage,"Prelude")==TRUE~"prologue", #1988 tdf stage 1
stringr::str_detect(stage,"Prologue")==TRUE~"prologue",
stringr::str_detect(stage, "[:digit:][:digit:][:alpha:]")==TRUE~stringr::str_sub(stage,7,9), # in case of e.g. 21a and 21b
stringr::str_detect(stage, "[:digit:][:alpha:]")==TRUE~stringr::str_sub(stage,7,8), # in case of e.g. 2a and 2b
TRUE~stringr::str_extract(stage,"\\d+")),
stage_type =
dplyr::case_when(stringr::str_detect(stage,"Prologue")==TRUE~"Prologue",
stringr::str_detect(stage,"ITT")==TRUE~"ITT",
stringr::str_detect(stage,"TTT")==TRUE~"TTT",
TRUE~"Road race"))
race_data <- race_data[-c(1:3),]
View(race_data)
lol <- cyclingscraper("pologne", years = 1990:2024)
devtools::load_all()
lol <- cyclingscraper("pologne", years = 1990:2024)
lol <- cyclingscraper("basque", years = "all")
basque_data <- lol
usethis::use_data(basque_data)
lol <- cyclingscraper("giro", years = "all")
lol <- cyclingscraper("giro", years = 2015)
lol <- cyclingscraper("giro", years = 2015:2024)
View(lol)
rm(list = ls())
library(devtools)
load_all()
document()
document()
pkgload::dev_help('raceoverview')
load()
load_all()
cyclingscraper("tdf", 2022)
lol <- racedata("tdf", 2022)
View(lol)
colnames(lol)
lol <- raceoverview("tdf", 2022)
View(lol)
load_all()
document()
rm(list = ls())
load_all()
document()
?racedata
build_manual()
load("~/Desktop/lol/cyclingdata/data/tdf_data.rda")
View(tdf_data)
rm(list = ls())
load_all()
data <- cyclingscraper(races=c"giro","vuelta", years="all")
data <- cyclingscraper(races=c("giro","vuelta"), years="all")
View(data)
giro <- subset(data, data$race=="Giro d'Italia")
vuelta <- subset(data, data$race!="Giro d'Italia")
saveRDS(vuelta, file = "vuelta_data")
save(vuelta, file = "vuelta_data")
save(vuelta, file = "vuelta_data.rda")
save(giro, file = "giro_data.rda")
View(data)
load("~/Desktop/lol/cyclingdata/data/tdf_data.rda")
View(tdf_data)
dauphine_data <- cyclingscraper(races = "dauphine", years = "all")
library(devtools)
load_all()
rm(list = ls())
load_all()
dauphine_data <- cyclingscraper(races = "dauphine", years = "all")
View(dauphine_data)
save(dauphine_data, file = "dauphine_data.rda")
suisse_data <- cyclingscraper(races = "suisse", years = "all")
save(suisse_data, file = "suisse_data.rda")
tirreno_data <- cyclingscraper(races = "tirreno", years = "all")
save(tirreno_data, file = "tirreno_data.rda")
basque_data <- cyclingscraper(races = "basque", years = "all")
save(basque_data, file = "basque_data.rda")
catalunya_data <- cyclingscraper(races = "catalunya", years = "all")
save(catalunya_data, file = "catalunya_data.rda")
rm(list = ls())
load("~/Desktop/lol/cyclingdata/.RData")
rm(list = ls())
load("~/Desktop/lol/cyclingdata/data/catalunya_data.rda")
load("~/Desktop/lol/cyclingdata/data/basque_data.rda")
load("~/Desktop/lol/cyclingdata/data/tirreno_data.rda")
load("~/Desktop/lol/cyclingdata/data/suisse_data.rda")
load("~/Desktop/lol/cyclingdata/data/dauphine_data.rda")
load("~/Desktop/lol/cyclingdata/data/pologne_data.rda")
load("~/Desktop/lol/cyclingdata/data/romandie_data.rda")
load("~/Desktop/lol/cyclingdata/data/parisnice_data.rda")
load("~/Desktop/lol/cyclingdata/data/giro_data.rda")
load("~/Desktop/lol/cyclingdata/data/vuelta_data.rda")
load("~/Desktop/lol/cyclingdata/data/tdf_data.rda")
cyclingdata <- rbind(basque_data,catalunya_data, dauphine_data, giro,parisnice_data, pologne_data,romandie_data, suisse_data,tdf_data,tirreno_data,vuelta)
View(dauphine_data)
load_all()
lol <- cyclingscraper("dauphine", years=1976:1977)
View(lol)
rm(list = ls())
load_all()
tdf_data <- cyclingscraper(races = "tdf", years = "all")
tdf_data <- cyclingscraper(races = "tdf", years = "all")
save(tdf, file = "tdf_data.rda")
save(tdf_data, file = "tdf_data.rda")
pologne_data <- cyclingscraper(races = "pologne", years = "all")
giro_data <- cyclingscraper(races = "giro", years = "all")
save(giro_data, file = "giro_data.rda")
vuelta_data <- cyclingscraper(races = "vuelta", years = "all")
vuelta_data <- cyclingscraper(races = "vuelta", years = "all")
save(vuelta_data, file = "vuelta_data.rda")
parisnice_data <- cyclingscraper(races = "parisnice", years = "all")
save(parisnice_data, file = "parisnice_data.rda")
romandie_data <- cyclingscraper(races = "romandie", years = "all")
save(romandie_data, file = "romandie_data.rda")
pologne_data <- cyclingscraper(races = "pologne", years = "all")
save(pologne_data, file = "pologne_data.rda")
rm(list = ls())
load("~/Desktop/lol/cyclingdata/data/pologne_data.rda")
load("~/Desktop/lol/cyclingdata/data/romandie_data.rda")
load("~/Desktop/lol/cyclingdata/data/parisnice_data.rda")
load("~/Desktop/lol/cyclingdata/data/vuelta_data.rda")
load("~/Desktop/lol/cyclingdata/data/giro_data.rda")
load("~/Desktop/lol/cyclingdata/data/tdf_data.rda")
load("~/Desktop/lol/cyclingdata/data/catalunya_data.rda")
load("~/Desktop/lol/cyclingdata/data/basque_data.rda")
load("~/Desktop/lol/cyclingdata/data/tirreno_data.rda")
load("~/Desktop/lol/cyclingdata/data/suisse_data.rda")
load("~/Desktop/lol/cyclingdata/data/dauphine_data.rda")
cyclingdata <- rbind(tdf_data, vuelta_data, giro_data, basque_data, catalunya_data, dauphine_data, parisnice_data,pologne_data,romandie_data,suisse_data,tirreno_data)
save(cyclingdata, file = "cyclingdata.rda")
table(cyclingdata$won_how)
cyclingdata$won_how  <- ifelse(stringr::str_detect(cyclingdata$won_how, "let us know")==TRUE,NA,
paste0(cyclingdata$won_how))
table(cyclingdata$won_how)
save(cyclingdata, file = "cyclingdata.rda")
rm(list = ls())
devtools::load_all()
cyclingdata
library(devtools)
use_readme_rmd()
usethis::use_news_md()
load("~/Desktop/lol/cyclingdata/data/cyclingdata.rda")
table(cyclingdata$race)
use_mit_license()
library(devtools)
use_mit_license()
load_all()
rm(cyclingdata)
load_all()
head(cyclingdata)
tdf <- cyclingdata |>
filter(race=="Tour de France")
tdf <- cyclingdata |>
filter( race =="Tour de France")
cyclingdata |>
filter( race =="Tour de France")
cyclingdata |> filter( year == 2022)
cyclingdata
cyclingdata <- cyclingdata
cyclingdata |> filter( year == 2022)
View(cyclingdata)
cyclingdata |> filter( year == 2000)
library(dplyr)
cyclingdata |> filter( year == 2000)
rm(cyclingdata)
tdf <- cyclingdata |>
filter(race == "Tour de France")
View(tdf)
tdf <- cyclingdata |>
filter(race == "Tour de France")
cyclingdata |>
filter(race == "Tour de France")
cyclingdata |>
filter(year == 2023)
devtools::build_readme()
load("~/Desktop/lol/cyclingdata/data/cyclingdata.rda")
## Overview
The `cyclingdata` package presents a comprehensive dataset on major stage races in professional cycling.
cyclingscraper(races = c("tdf", "giro"), years = 2022:2023)
cyclingscraper(races = c("tdf", "giro"),
years = 2022:2023,
progress = FALSE)
cyclingscraper(races = c("tdf", "giro"),
years = 2022:2023,
progress = TRUE,
sleep = 2)
rm(list = ls())
devtools::load_all()
usethis::use_pkgdown()
pkgdown::build_site()
document()
document()
usethis::use_citation()
document()
pkgdown::build_site()
pkgdown::build_site()
use_mit_license()
pkgdown::build_site()
